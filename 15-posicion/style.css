/* 

Position

Es la propiedad que nos permite POSICIONAR los elementos del html.

Conceptos Importantes:

  1. Flujo de Renderizado: los elementos en html se dibujan de izquierda a derecha y de arriba hacia abajo.

  2. Espacio Reservado: Es el espacio que tiene un elemento asignado en el navegador.

  3. El elemento Posicionado: Es cuando dr propiedad "positio" tiwnw un valor distinto a "static", que es el valor por default.

  4. Stacting Context: Contexto de Apilamiento. Es el orden en el wur dr superponen o apilan los elementos en el html. 

Al posicionar un elemento se habilitan 5 propiedades que podemos usar para mover el elemento en 3 ejes (x, y, z)
  
  top -> Moverá el elemento desde la parte superior. 
  rigth -> Moverá el elemento desde la parte derecha.
  bottom -> Moverá el elemento desde la parte inferior.
  left -> Moverá el elemento desde la parte izquierda.

  * Los elementos tienen su punto de origen (0,0) en la esquina superior izquierda.
  * La distancia a moverse se indica en px y acepta valores negativos.
  * Si a un elemento le declaramos la propiedad top, bottom deja de funcionar.
  * Si a un elemento le declaramos la propiedad left, rigth deja de funcionar.
    
    z-inex -> Nos permite mover el elemento en el contexto de apilamiento, (eje z). Recibe valores en numero o indices, sin unidad. Puedes recibir valores negativos.

    Los posibles valores que "position" recibe son::after

      Static -> Es el valor por default de los elementos. Con este valor el elemento NO ESTA POSICIONADO y no podemos moverlo.

      relative -> Es el elemento mantiene su pisición y medidas en el dlujo de redenrizado. Mantendrá su espacio reservado. Si lo movemos usará su contenedor como referencia.

      absolute -> El elemento perderá sus medidadas y su espacio reservado. Si movemos el elemento lo hara en función de su contenedor y si n tiene alguno, lo hará en funcion del elemento html.

      fidex ->  El elemnto perdera sus medidas y su espacio reservado, Si lo movemos usará el elemento html como referencia y quedará fijo en esa posición  aun que hagamos scroll

      sticky -> Es una mezcla de "relative" y "fixed". Con este valor, las propiedades top, rigth, bottom y left, no sirven para mover el elemento. Sin
*/

*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  color:black;
  background-color: cornflowerblue;
}

.container {
  margin: 0 auto;
  width: 300px;
  height: 300px;
  background-color: lightskyblue;
}

.box {
  width: 100px;
  height: 100px;
}

.box-1 {
  position: relative;
  /* top: 20px; */
  /* left: 20px; */
  right: -20px;
  bottom: -20px;
  z-index: 20;
  background-color: darkslategray;
}

.box-2 {
  position: relative;
  left: 50px;
  top: -25px;
  z-index: 10;
  background-color: lightseagreen;
}

.box-3 {
  position: absolute;
 /*  right: 0;
  bottom: 0; */
  top: 100px;
  left: 200px;
  z-index: 15;
  background-color: mediumblue;
}

.box-4 {
  position: absolute;
  bottom: 0;
  right: 0;
  z-index: 40;
  width: 100%;
  background-color: lightgreen;
}

nav {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 20;
  width: 100%;
  height: 50px;
  text-align: center;
  background-color: mediumslateblue;
}

nav a {
  font-size: 18px;
  display: inline-block;
  padding: 12px 8px;
  text-decoration: none;
  color: lavender;
}

nav a:hover {
  text-decoration: underline;
}

.button {
  position: fixed;
  right: 20px;
  bottom: 20px;
  z-index: 10;
  width: 100px;
  height: 100px;
  font-size: 48px;
  text-align: center;
  padding-top: 18px;
  border-radius: 50%;
  background-color: darkseagreen;
  cursor: pointer;
}

.button:hover {
  background-color: darkcyan;
}
main {
  width: 100%;
  max-width: 960px;
  margin: 0 auto;
  padding-top: 50px;
  background-color: moccasin;
}

main section {
  padding: 0 24px;
}

section h2{
  position: sticky;
  top: 50px;
  font-size: 34px;
  background-color: gold;
}

section p {
  font-size: 18px;
  line-height: 1.5;
  margin-bottom: 24px;
}
